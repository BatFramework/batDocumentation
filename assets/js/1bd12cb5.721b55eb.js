"use strict";(self.webpackChunkbat_documentation=self.webpackChunkbat_documentation||[]).push([[145],{3225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var i=t(4848),s=t(8453);const o={title:"Input"},a="Input",r={id:"basics/input",title:"Input",description:"We will now explain how to to access user input (mouse or keyboard), and how to use it in your project easily.",source:"@site/docs/basics/input.md",sourceDirName:"basics",slug:"/basics/input",permalink:"/batDocumentation/docs/basics/input",draft:!1,unlisted:!1,editUrl:"https://github.com/BatFramework/batDocumentation/tree/main/docs/basics/input.md",tags:[],version:"current",frontMatter:{title:"Input"},sidebar:"docSidebar",previous:{title:"Entities",permalink:"/batDocumentation/docs/basics/entities"},next:{title:"Export to Web",permalink:"/batDocumentation/docs/basics/web"}},c={},l=[{value:"What is an action",id:"what-is-an-action",level:2},{value:"Why not use events",id:"why-not-use-events",level:2},{value:"How to use Actions",id:"how-to-use-actions",level:2},{value:"Assigning",id:"assigning",level:3},{value:"Keyboard",id:"keyboard",level:4},{value:"Mouse",id:"mouse",level:4},{value:"Events",id:"events",level:4},{value:"Trigger type",id:"trigger-type",level:3},{value:"Insantaneous",id:"insantaneous",level:4},{value:"Holding",id:"holding",level:4},{value:"Continuous",id:"continuous",level:4},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Example",id:"example",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"input",children:"Input"})}),"\n",(0,i.jsx)(n.p,{children:"We will now explain how to to access user input (mouse or keyboard), and how to use it in your project easily."}),"\n",(0,i.jsx)(n.admonition,{title:"Gamepad",type:"note",children:(0,i.jsx)(n.p,{children:"Gamepad support is scheduled for a future release, and is not made available by batFramework.\nHowever it is possible to use the pygame events for gamepad (as any other pygame event) in"})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-an-action",children:"What is an action"}),"\n",(0,i.jsx)(n.p,{children:"Actions are a structure used to represent an 'action' that can be triggered by any user input. It is then possible to assign one or more mouse and/or keyboard events as triggers for any specific action."}),"\n",(0,i.jsx)(n.p,{children:"Each action holds a value (in a majority of cases a boolean) that represents if the action is active."}),"\n",(0,i.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,i.jsxs)(n.p,{children:["We might want the player to jump by pressing the ",(0,i.jsx)(n.code,{children:"<UP>"})," directional key, but also the ",(0,i.jsx)(n.code,{children:"<W>"})," key on the keyboard."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'bf.Action("jump").add_key_control(pygame.K_UP,pygame.K_w)\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"why-not-use-events",children:"Why not use events"}),"\n",(0,i.jsxs)(n.p,{children:["It is indeed possible to manage input directly, with ",(0,i.jsx)(n.code,{children:"if"})," statements, however this can cause issues in projects with larger scale, as well as hinder code readability."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"keys = pygame.key.get_pressed()\nif keys[pygame.K_w] or keys[pygame.K_UP]:\n    jump()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By referring to what you want the player to do with an action like 'jump', it is far more legible and easier to manage than ",(0,i.jsx)(n.code,{children:"pygame.K_SPACE or pygame.K_w"}),". It also makes it modular and allows for easy remapping for actions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'jump_action = bf.Action("jump").add_key_control(pygame.K_UP,pygame.K_w)\nif jump_action.is_active():\n    jump()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-actions",children:"How to use Actions"}),"\n",(0,i.jsx)(n.p,{children:"Create an action with :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'bf.Action("name")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"assigning",children:"Assigning"}),"\n",(0,i.jsxs)(n.p,{children:["You can assign any input methods using ",(0,i.jsx)(n.code,{children:"add_<type>_control()"})," where ",(0,i.jsx)(n.code,{children:"<type>"})," can be either ",(0,i.jsx)(n.code,{children:"keyboard"}),", ",(0,i.jsx)(n.code,{children:"mouse"})," or ",(0,i.jsx)(n.code,{children:"event"}),".\nYou can combine different input methods in a single action"]}),"\n",(0,i.jsx)(n.h4,{id:"keyboard",children:"Keyboard"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'bf.Action("test").add_key_control(pygame.K_UP,pygame.K_w)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"mouse",children:"Mouse"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'bf.Action("test").add_mouse_control(1)\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Mouse controls",type:"note",children:(0,i.jsxs)(n.p,{children:["When the argument for ",(0,i.jsx)(n.code,{children:"add_mouse_control"})," is an integer, it refers to the mouse ",(0,i.jsx)(n.a,{href:"https://pyga.me/docs/ref/mouse.html",children:"button mappings"})," from pygame-ce."]})}),"\n",(0,i.jsx)(n.h4,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.p,{children:"Although not recommended for long term, it is possible to use events directly as triggers for an action.\nIn pygame-ce all event types are integers."}),"\n",(0,i.jsx)(n.h3,{id:"trigger-type",children:"Trigger type"}),"\n",(0,i.jsx)(n.h4,{id:"insantaneous",children:"Insantaneous"}),"\n",(0,i.jsx)(n.h4,{id:"holding",children:"Holding"}),"\n",(0,i.jsx)(n.h4,{id:"continuous",children:"Continuous"}),"\n",(0,i.jsx)(n.h3,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,i.jsx)(n.p,{children:"When an action is created it has to be managed, either manually or automatically.\nHere's a rundown of what the action needs each frame to work correctly:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"process_event(event:pygame.Event)"})]}),"\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"reset()"})," to clear the action"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By doing so, it is possible to get the value of the action y--between the process and reset calls"}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's an example code for a Scene using actions to change the background color."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import batFramework as bf\nimport pygame\nclass MyScene(bf.Scene):\n    def do_when_added(self):\n        self.actions.add(bf.Action("change_color").add_key_control(pygame.K_w,pygame.K_SPACE))\n\n\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);